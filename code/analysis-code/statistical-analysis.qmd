---
title: "Statistical Analysis"
author: "Ranni Tewfik"
date: "03/15/2024"
output: html_document
---

  
# Statistical Analysis


This statistical analysis script loads the processed data and does statistical analysis.


# Load and Check Processed Data


```{r}
# Load required packages
library(here)
library(dplyr)
library(skimr)
library(survival)
library(survminer)
library(ggplot2)
library(tidyverse)
library(gtsummary)
library(car)
library(broom)
library(rsample)
library(caret)

# Load processed data
seer <- readRDS(here("data/processed-data/processeddata.rds"))

# Attach processed data
attach(seer)

# Summary of processed data
glimpse(seer)
summary(seer)
head(seer)
```


# Backward Elimination

```{r}
# Fit the full Cox proportional hazards model
seer$death <- as.numeric(seer$death)
full_model <- coxph(Surv(survival_time, death) ~ ., data = seer, method = "breslow")

# Perform backward elimination to choose the best variables
final_model <- step(full_model, direction = "backward")
summary(final_model)
```


Based on the results of the backward elimination process using the AIC criterion, "ethnicity", "agegroup", and "stage" will be the variables in the full Cox proportional hazards model. The existing literature supports the inclusion of these confounding variables in an etiologic/causal model.


# Proportional Hazards Assessment


```{r}
# Create a log-log survival curve for "ethnicity"
plot(survfit(Surv(survival_time, death) ~ ethnicity), fun = "cloglog")

# Save the log-log survival curve for "ethnicity"
png(here("results/figures/loglogcurve_ethnicity.png"))
plot(survfit(Surv(survival_time, death) ~ ethnicity), fun = "cloglog")
dev.off()

# Create a log-log survival curve for "agegroup"
plot(survfit(Surv(survival_time, death) ~ agegroup), fun = "cloglog")

# Save the log-log survival curve for "agegroup"
png(here("results/figures/loglogcurve_age.png"))
plot(survfit(Surv(survival_time, death) ~ agegroup), fun = "cloglog")
dev.off()

# Create a log-log survival curve for "stage"
plot(survfit(Surv(survival_time, death) ~ stage), fun = "cloglog")

# Save the log-log survival curve for "stage"
png(here("results/figures/loglogcurve_stage.png"))
plot(survfit(Surv(survival_time, death) ~ stage), fun = "cloglog")
dev.off()
```


The log-log survival curves to test the proportional-hazards assumption for the Cox proportional-hazards model can be found in the "figures" folder.


# Unadjusted Analyses


```{r}
# Fit the Cox proportional-hazards model using "ethnicity" as the predictor
seer$death <- as.numeric(seer$death)
simple_model_ethnicity <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(ethnicity), ref = "White"), data = seer, method = "breslow")
summary(simple_model_ethnicity)

# Compute and print the C-index
predicted <- predict(simple_model_ethnicity, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = seer)
print(c_index[[1]])

# Place the results from the model fitting into a data frame with the tidy function
simple_model_ethnicity_table <- tidy(simple_model_ethnicity)

# Look at the table with the results from the model fitting
print(simple_model_ethnicity_table)

# Save the table with the results from the model fitting 
saveRDS(simple_model_ethnicity_table, file = here("results/tables/simple_model_ethnicity_table.rds"))

# Place the exponentiated coefficients (hazard ratios) and confidence intervals from the model fitting into a data frame 
coxsummary <- summary(simple_model_ethnicity)
hr <- coxsummary$conf.int

simple_model_ethnicity_table_hr <- data.frame(
  "Characteristic" = c("Asian", "Black", "Hispanic", "Other"),
  "Hazard ratio" = hr[, 1],
  "95% CI (lower)" = hr[, 3],
  "95% CI (upper)" = hr[, 4]
  )

# Look at the table with hazard ratios and confidence intervals
print(simple_model_ethnicity_table_hr)

# Save the table with hazard ratios and confidence intervals
saveRDS(simple_model_ethnicity_table_hr, file = here("results/tables/simple_model_ethnicity_table_hr.rds"))
```


The results from the model fitting using only "ethnicity" as the predictor ("simple_model_ethnicity_table.rds" and "simple_model_ethnicity_table_hr.rds") can be found in the "tables" folder.


```{r}
# Fit the Cox proportional-hazards model using "agegroup" as the predictor
seer$death <- as.numeric(seer$death)
simple_model_agegroup <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(agegroup), ref = "0-49 years"), data = seer, method = "breslow")
summary(simple_model_agegroup)

# Compute and print the C-index
predicted <- predict(simple_model_agegroup, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = seer)
print(c_index[[1]])

# Place the results from the model fitting into a data frame with the tidy function
simple_model_agegroup_table <- tidy(simple_model_agegroup)

# Look at the table with the results from the model fitting
print(simple_model_agegroup_table)

# Save the table with the results from the model fitting 
saveRDS(simple_model_agegroup_table, file = here("results/tables/simple_model_agegroup_table.rds"))

# Place the exponentiated coefficients (hazard ratios) and confidence intervals from the model fitting into a data frame 
coxsummary <- summary(simple_model_agegroup)
hr <- coxsummary$conf.int

simple_model_agegroup_table_hr <- data.frame(
  "Characteristic" = c("50-59 years", "60-69 years", "70-79 years", "80+ years"),
  "Hazard ratio" = hr[, 1],
  "95% CI (lower)" = hr[, 3],
  "95% CI (upper)" = hr[, 4]
  )

# Look at the table with hazard ratios and confidence intervals
print(simple_model_agegroup_table_hr)

# Save the table with hazard ratios and confidence intervals
saveRDS(simple_model_agegroup_table_hr, file = here("results/tables/simple_model_agegroup_table_hr.rds"))
```


The results from the model fitting using only "agegroup" as the predictor ("simple_model_agegroup_table.rds" and "simple_model_agegroup_table_hr.rds") can be found in the "tables" folder.


```{r}
# Fit the Cox proportional-hazards model using "stage" as the predictor
seer$death <- as.numeric(seer$death)
simple_model_stage <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(stage), ref = "Localized"), data = seer, method = "breslow")
summary(simple_model_stage)

# Compute and print the C-index
predicted <- predict(simple_model_stage, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = seer)
print(c_index[[1]])

# Place the results from the model fitting into a data frame with the tidy function
simple_model_stage_table <- tidy(simple_model_stage)

# Look at the table with the results from the model fitting
print(simple_model_stage_table)

# Save the table with the results from the model fitting 
saveRDS(simple_model_stage_table, file = here("results/tables/simple_model_stage_table.rds"))

# Place the exponentiated coefficients (hazard ratios) and confidence intervals from the model fitting into a data frame 
coxsummary <- summary(simple_model_stage)
hr <- coxsummary$conf.int

simple_model_stage_table_hr <- data.frame(
  "Characteristic" = c("Distant", "Regional"),
  "Hazard ratio" = hr[, 1],
  "95% CI (lower)" = hr[, 3],
  "95% CI (upper)" = hr[, 4]
  )

# Look at the table with hazard ratios and confidence intervals
print(simple_model_stage_table_hr)

# Save the table with hazard ratios and confidence intervals
saveRDS(simple_model_stage_table_hr, file = here("results/tables/simple_model_stage_table_hr.rds"))
```


The results from the model fitting using only "stage" as the predictor ("simple_model_stage_table.rds" and "simple_model_stage_table_hr.rds") can be found in the "tables" folder.


# Adjusted Analysis


```{r}
# Fit the Cox proportional-hazards model using "ethnicity", "agegroup", and "stage" as the predictors
full_model <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(ethnicity), ref = "White") + relevel(factor(agegroup), ref = "0-49 years") + relevel(factor(stage), ref = "Localized"), data = seer, method = "breslow")
summary(full_model)

# Compute and print the C-index
predicted <- predict(full_model, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = seer)
print(c_index[[1]])

# Place the results from the model fitting into a data frame with the tidy function
full_model_table <- tidy(full_model)

# Look at the table with the results from the model fitting
print(full_model_table)

# Save the table with the results from the model fitting 
saveRDS(full_model_table, file = here("results/tables/full_model_table.rds"))

# Place the exponentiated coefficients (hazard ratios) and confidence intervals from the model fitting into a data frame 
coxsummary <- summary(full_model)
hr <- coxsummary$conf.int

full_model_table_hr <- data.frame(
  "Characteristic" = c("Asian", "Black", "Hispanic", "Other", "50-59 years", "60-69 years", "70-79 year", "80+ years", "Distant", "Regional"),
  "Adjusted hazard ratio" = hr[, 1],
  "95% CI (lower)" = hr[, 3],
  "95% CI (upper)" = hr[, 4]
  )

# Look at the table with hazard ratios and confidence intervals
print (full_model_table_hr)

# Save the table with hazard ratios and confidence intervals
saveRDS(full_model_table_hr, file = here("results/tables/full_model_table_hr.rds"))
```


The results from the model fitting using "ethnicity", "agegroup", and "stage" as the predictors ("full_model_table.rds" and "full_model_table_hr.rds") can be found in the "tables" folder.


The Concordance Index (C-index) is a measure of predictive accuracy or discrimination in survival analysis models, where a higher value indicates better discrimination. Comparing the models with only "ethnicity" (C-index = 0.52), only "agegroup" (C-index = 0.70), and only "stage" (C-index = 0.61), the model with all variables has the best predictive discrimination and model performance (C-index = 0.76).


# Train/Test Split


```{r}
#Set a seed
rngseed = 1234
set.seed(rngseed)

#Split the data randomly into 75% train and 25% test set
data_split <- initial_split(seer, prop = 3/4)
train_data <- training(data_split)
test_data <- testing(data_split)

#Fit the Cox proportional hazards model with only "ethnicity" using the training data
simple_model_ethnicity_train <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(ethnicity), ref = "White"), data = train_data, method = "breslow")
summary(simple_model_ethnicity_train)

# Compute and print the C-index
predicted <- predict(simple_model_ethnicity_train, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = train_data)
print(c_index[[1]])

#Fit the Cox proportional hazards model with only "agegroup" using the training data
simple_model_agegroup_train <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(agegroup), ref = "0-49 years"), data = train_data, method = "breslow")
summary(simple_model_agegroup_train)

# Compute and print the C-index
predicted <- predict(simple_model_agegroup_train, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = train_data)
print(c_index[[1]])

#Fit the Cox proportional hazards model with only "stage" using the training data
simple_model_stage_train <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(stage), ref = "Localized"), data = train_data, method = "breslow")
summary(simple_model_stage_train)

# Compute and print the C-index
predicted <- predict(simple_model_stage_train, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = train_data)
print(c_index[[1]])

#Fit the full Cox proportional hazards model using the training data
full_model_train <- coxph(formula = Surv(survival_time, death) ~ relevel(factor(ethnicity), ref = "White") + relevel(factor(agegroup), ref = "0-49 years") + relevel(factor(stage), ref = "Localized"), data = train_data, method = "breslow")
summary(full_model_train)

# Compute and print the C-index
predicted <- predict(full_model_train, type = "lp", se.fit = TRUE)$fit
c_index <- survConcordance(Surv(survival_time, death) ~ predicted, data = train_data)
print(c_index[[1]])
```


Using the training data and comparing the C-index values for the four models, the best-performing model is the full model (C-index = ), and the worst-performing model is the model with only "ethnicity" (C-index = 0.52).

